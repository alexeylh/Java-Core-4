public class JvmComprehension {

    public static void main(String[] args) {
        int i = 1;                      // В области памяти Stack создаётся новое значение длиной 4 байта = 1
        Object o = new Object();        // В области Heap вылеляется память, в которой создаётся новый объект,
                // адрес которого помещается в переменную o в пямяти Stack
        Integer ii = 2;                 // В области памяти Heap вылеляется память, в которой создаётся новое значение
                // длиной 4 байта = 2, адрес которого помещается в переменную ii в пямяти Stack
        printAll(o, i, ii);             // В области памяти Stack создаётся новй фрейм, куда в качестве параметров
                // помещаются значение i и адреса ссылочных объектов o, ii
        System.out.println("finished"); // В области памяти Stack создаётся новй фрейм, куда в качестве
                // параметров помещается адрес строки, вычисленной в указанном в скобках выражении,
                // значение строки будет в области heap.
                // После чего вызывается метод println объекта System.out,
                // по завершении работы которого очистятся фрейм для вызова println и текущий фрейм main.
                // Через некоторое время сработает сборщик мусора, который ояистит все объекты в heap,
                // созданные в этой программе.
    }

    private static void printAll(Object o, int i, Integer ii) {
        Integer uselessVar = 700;   // В области памяти Heap вылеляется память, в которой создаётся новое значение
                // длиной 4 байта = 700, адрес которого помещается в переменную uselessVar в пямяти Stack
        System.out.println(o.toString() + i + ii);  // В области памяти Stack создаётся новй фрейм, куда в качестве
                // параметров помещается адрес строки, вычисленной в указанном в скобках выражении,
                // значение строки будет в области heap.
                // После чего вызывается метод println объекта System.out,
                // по завершении работы которого очистятся фрейм для вызова println и текущий фрейм printAll
                // и текущим станет родительский фрейм main
    }
}
